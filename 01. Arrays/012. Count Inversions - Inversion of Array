=> By Using Merge Sort
void merge(long long *arr, int start,int mid, int end, int &count){
    vector<int> temp;
    int i = start;
    int j = mid+1;
    while(i<=mid && j<=end){
        if(arr[i]<=arr[j]){
            temp.push_back(arr[i]);
            i++;
        }else{
            //arr[i]>arr[j]
            temp.push_back(arr[j]);
            count += mid-i+1;
            j++;
        }
    }
    while(i<=mid){
        temp.push_back(arr[i]);
        i++;
    }
    while(j<=end){
        temp.push_back(arr[j]);
        j++;
    }

    for(int i=start;i<=end;i++){
        arr[i]=temp[i-start];
    }
}
void mergesort(long long *arr, int start, int end, int &count){
    int mid = (start + end)/2;
    if(start == end){
        return ;
    }
    mergesort(arr,start,mid,count);
    mergesort(arr,mid+1,end,count);
    merge(arr,start,mid,end,count);
}
long long getInversions(long long *arr, int n){
    int count=0;
    mergesort(arr,0,n-1,count);
    return count;
}

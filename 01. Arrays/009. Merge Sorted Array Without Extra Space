Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m-1;
        int j = n-1;
        int k = m + n -1;
        while(j>=0){
            if(i >= 0 && nums1[i] > nums2[j]){
                nums1[k--] = nums1[i--];
            }
            else{
                nums1[k--] = nums2[j--];
            }
        }
    }
----------------------------------------------------------------------
=> Merge two Sorted Arrays Without Extra Space
Input: n = 4,arr1[] = [1 4 8 10]  |  m = 5,arr2[] = [2 3 9]
Output: arr1[] = [1 2 3 4], arr2[] = [8 9 10]

void merge(long long arr1[], long long arr2[], int n, int m) {
    //Declare 2 pointers:
    int left = n - 1;
    int right = 0;
    //Swap the elements until arr1[left] is
    // smaller than arr2[right]:
    while (left >= 0 && right < m) {
        if (arr1[left] > arr2[right]) {
            swap(arr1[left], arr2[right]);
            left--, right++;
        }
        else {
            break;
        }
    }
    // Sort arr1[] and arr2[] individually:
    sort(arr1, arr1 + n);
    sort(arr2, arr2 + m);
}
